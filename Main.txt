/*
ss1 ss2 ss3 ss4 MISO MOSI SCK RST ec1 tr1 ec2 tr2 ec3 tr3 ec4 tr4
4R 4Y 4G
The ceil is LSB
The floor is MSB
a=Q9
b=Q8
c=Q7
d=Q6
e=Q5
f=Q4
g=Q1
2 rl1  Red LED traffic 1
3 rl2 Red LED traffic 2
4 rl3 Red LED traffic 3
5 rl4 Red LED traffic 4
6 yl1 Yellow LED traffic 1
7 yl2 Yellow LED traffic 2
8 yl3 Yellow LED traffic 3
9 yl4 Yellow LED traffic 4
10 gl1  Green LED traffic 1
11 gl2  Green LED traffic 2
12 gl3  Green LED traffic 3
13 gl4  Green LED traffic 4
14 tr1  Trigger of Ultrasonic traffic 1
15 tr2  Trigger of Ultrasonic traffic 2
16 tr3  Trigger of Ultrasonic traffic 3
17 tr4  Trigger of Ultrasonic traffic 4
18 ec1  Echo of Ultrasonic traffic 1
19 ec2  Echo of Ultrasonic traffic 2
20 ec3  Echo of Ultrasonic traffic 3
21 ec4  Echo of Ultrasonic traffic 4
22 cnt1 Count pin of counter LSB traffic 1
23 rst1 Reset pin of counter LSB traffic 1
24 cnt2 Count pin of counter LSB traffic 2
25 rst2 Reset pin of counter LSB traffic 2
26 cnt3 Count pin of counter LSB traffic 3
27 rst3 Reset pin of counter LSB traffic 3
28 cnt4 Count pin of counter LSB traffic 4
29 rst4 Reset pin of counter LSB traffic 4
30 cnt5 Count pin of counter MSB traffic 1
31 rst5 Reset pin of counter MSB traffic 1
32 cnt6 Count pin of counter MSB traffic 2
33 rst6 Reset pin of counter MSB traffic 2
34 cnt7 Count pin of counter MSB traffic 3
35 rst7 Reset pin of counter MSB traffic 3
36 cnt8 Count pin of counter MSB traffic 4
37 rst8 Reset pin of counter MSB traffic 4
38 slk  SLK pin of RTC=SCLK
39 io IO pin of RTC=DAT
40 ce CE pin of RTC=RST
41 ss1  SS pin of RFID of traffic 1
42 ss2  SS pin of RFID of traffic 2
43 ss3  SS pin of RFID of traffic 3
44 ss4  SS pin of RFID of traffic 4
45 buz  Buzzer pin
46 RST  RST pin of RFID
50 MISO MISO pin of RFID (it is combined for all RFID)
51 MOSI MOSI pin of RFID (it is combined for all RFID)
52 SCK  SCK pin of RFID (it is combined for all RFID)

1st four cnt&rst is LSB the 2nd is MSB

Card:
1- 58 A9 62 10
2- 58 77 E2 10
3- 83 B5 AC 75
4- D2 91 AB 75

1- 88 169 98 16
2- 88 119 226 16
3- 131 181 172 117
4- 210 145 171 117

Tag:
1- 15 E9 D0 65
2- 06 9E 33 5E
3- 05 46 D1 65
4- E5 BE D3 65

1- 21 233 208 101
2- 06 158 51 94
3- 05 70 209 101
4- 229 190 211 101

*/
#include<SPI.h> /*Serial Pripheral Interface library*/
#include<MFRC522.h> /*Mifare RC522 library*/
#include <virtuabotixRTC.h> /*RTC library*/
#define rrst 46
#define ss1 41
#define ss2 42
#define ss3 43
#define ss4 44
#define NR_OF_READERS   4
byte ssPins[] = {ss1,ss2,ss3,ss4}; /*matrix of ss pins*/
MFRC522 mfrc522[NR_OF_READERS]; /*matrix object of RFID*/
void count(int,int,int);
void counter();
void count1();
void count2();
boolean sonic(int,int);
void rrfid();
void lclose();
void steady(int,int);
void stand();
void zero();
void change();
void light(int,int,int);
void next();
int rcheck();
void ucheck(int);
boolean eucheck(int);
const int rl1=2;
const int rl2=3;
const int rl3=4;
const int rl4=5;
const int yl1=6;
const int yl2=7;
const int yl3=8;
const int yl4=9;
const int gl1=10;
const int gl2=11;
const int gl3=12;
const int gl4=13;
const int tr1=14;
const int tr2=15;
const int tr3=16;
const int tr4=17;
const int ec1=18;
const int ec2=19;
const int ec3=20;
const int ec4=21;
const int cnt1=22;
const int rst1=23;
const int cnt2=24;
const int rst2=25;
const int cnt3=26;
const int rst3=27;
const int cnt4=28;
const int rst4=29;
const int cnt5=30;
const int rst5=31;
const int cnt6=32;
const int rst6=33;
const int cnt7=34;
const int rst7=35;
const int cnt8=36;
const int rst8=37;
const int slk=38;
const int io=39;
const int ce=40;
const int buz=45;
virtuabotixRTC myRTC(slk,io,ce); /*RTC object*/
int arr[11]={504,192,433,481,201,361,377,448,505,489,1}; /*seven segment no.'s matrix*/
byte nuid[4][4]; /*Stack matrix for RFID*/
byte nuid1[4][4]={{88,169,98,16},{88,119,226,16},{131,181,172,117},{210,145,171,117}}; //RFID Cards ID's
unsigned int ept=10,mdis=30,rlstat=0,cstat=1,rstat=0,lstat=1,dis=13,rt=10,sf=0,mt=25;
boolean rfstat=0,emf1=0,emf2=0,emf3=0,emf4=0,us1=0,us2=0,us3=0,us4=0,ustat,pstat=0;
unsigned int n1=0,n2=0,pcount=0,sec1=0,sec2=0,lsec=0,sec=0,tcount=0,lcount=0,me=5;
/*
ept=No. of checks for testing the empty street
mdis=Maximum timeout for ultrasonic
cstat= Current state
rfstat=RFID flag happend or not
rstat=RFID flag no. of traffic
ustat=Current empty street
lstat=Previous state
rlstat=Last state before the rstat came
dis=The distance from the ultrasonic to the other side of the street
rt=RFID time to wait
sf=Steady flag
mt=Maximum time for the traffic
emf1=Flag for the empty street1
emf2=Flag for the empty street2
emf3=Flag for the empty street3
emf4=Flag for the empty street4
us1=Cheching ultrasonic1
us2=Cheching ultrasonic2
us3=Cheching ultrasonic3
us4=Cheching ultrasonic4
me=Maximum empty time
sec1=Current sec
sec2=Previous sec
sec=the difference between the current and previous second
tcount=Timer counter
lcount=The counter of the last traffic before the RFID signal came
n1=Previous MSB
n2=Previous LSB
pcount=Previous counting
*/
unsigned int i1=0,i2=0,i3=0,i4=0,f1=0,f2=0,f3=0,f4=0;
/*
 * i1=no. of seconds for empty street1
 * i2=no. of seconds for empty street2
 * i3=no. of seconds for empty street3
 * i4=no. of seconds for empty street4
 * f1=Accumelator of empty street1
 * f2=Accumelator of empty street2
 * f3=Accumelator of empty street3
 * f4=Accumelator of empty street4
 */
int no1[4]={0,0,0,0};  /*LSB matrix of no.'s for 7-segments*/
int no2[4]={0,0,0,0};  /*MSB matrix no.'s for 7-segments*/
void setup()  /*Initial Program*/
{SPI.begin();  /*Begin the serial pripheral interface channel*/
Serial.begin(9600); /*Begin the serial channel*/
 for (uint8_t reader = 0; reader < NR_OF_READERS; reader++) /*Loop for defining the pins of RFID objects*/
{delay(100);
mfrc522[reader].PCD_Init(ssPins[reader], rrst); /* Init each MFRC522 card*/
mfrc522[reader].PCD_DumpVersionToSerial();}
for(int i=2;i<38;i++) /*Loop to define the output pins*/
{if(i<22&&i>17)
continue;
else
pinMode(i,OUTPUT);}
pinMode(ec1,INPUT);
pinMode(ec2,INPUT);
pinMode(ec3,INPUT);
pinMode(ec4,INPUT);
pinMode(buz,OUTPUT);
myRTC.setDS1302Time(00,00,10,7,1,4,2017); /*Set the time for RTC*/
stand();  /*Make all the traffic red lights*/
zero(); /*Make all the timer's zero*/
delay(1000);
light(cstat,2,5); /*Start the operating of the trafiic lights*/
}
void rrfid()  /*Backbone of the RFID*/
{for (uint8_t reader = 0; reader < NR_OF_READERS; reader++) {
    if (mfrc522[reader].PICC_IsNewCardPresent() && mfrc522[reader].PICC_ReadCardSerial()) {
      for (byte i = 0; i < 4; i++)
      {nuid[reader][i] = mfrc522[reader].uid.uidByte[i];
Serial.print(mfrc522[reader].uid.uidByte[i]);   
digitalWrite(buz,1);
if(i==3)
Serial.println("");}
      mfrc522[reader].PICC_HaltA();
      mfrc522[reader].PCD_StopCrypto1();}}}
int rcheck()  /*Check which traffic had RFID signal if not it will return 0*/
{int i,j,k;
for(i=0;i<4;i++)  /*Reset the stack matrix of RFID*/
for(j=0;j<4;j++)
nuid[i][j]=0;
rrfid();  /*Excution of the backbone to take the signal*/
for(k=0;k<4;k++)  /*the row of the stack*/
for(i=0;i<4;i++)  /*the row of the card's id's*/
for(j=0;j<4;j++)  /* the coloumn of both*/
{if(nuid[k][j]!=nuid1[i][j])
{if(k==3&&i==3)
return 0;
else
break;}
else if(nuid[k][j]==nuid1[i][j]&&j==3)
return (k+1);}}
boolean sonic(int tr , int ec)  /*Backbone of the Ultrasonic*/
{unsigned long d,x;
digitalWrite(tr,0);
delayMicroseconds(2);
digitalWrite(tr,1);
delayMicroseconds(10);
digitalWrite(tr,0);
x=pulseIn(ec,1,mdis*116);
d=x/58;
if(d>dis||d==0)
return 0;
else if(d<=dis&&d>0)
return 1;}
void count(int nm , int rst , int cnt)  /*Backbone of the 7-segment's counters*/
{int i,j;
delayMicroseconds(1);
digitalWrite(rst,1);  /*Reset the counter before counting*/
delayMicroseconds(1);  
digitalWrite(rst,0);
  for(j=0;j<arr[nm];j++) /*Begin of counting*/
{delayMicroseconds(1);
digitalWrite(cnt,1);
delayMicroseconds(1);
  digitalWrite(cnt,0);}}
void ucheck(int state)  /*Chicking the signal of ultrasonic in which traffic is empty */ 
{if(state==1)
{us1=sonic(tr1,ec1);
if(us1==1)
f1=0;
else
f1++;}
else if(state==2)
{us2=sonic(tr2,ec2);
if(us2==1)
f2=0;
else
f2++;}
else if(state==3)
{us3=sonic(tr3,ec3);
if(us3==1)
f3=0;
else
f3++;}
else if(state=4)
{us4=sonic(tr4,ec4);
if(us4==1)
f4=0;
else
f4++;}
us1=0;
us2=0;
us3=0;
us4=0;}
boolean eucheck(int state) /*It gives a signal for the street that is empty for constant time*/
{if(state==1)
{if(f1>ept)
i1++;
else
i1=0;
if(i1>=me)
{i1=0;
  emf1=1;}
else
emf1=0;}
else if(state==2)
{if(f2>ept)
i2++;
else
i2=0;
if(i2>=me)
{i2=0;
  emf2=1;}
else
emf2=0;}
else if(state==3)
{if(f3>ept)
i3++;
else
i3=0;
if(i3>=me)
{i3=0;
  emf3=1;}
else
emf3=0;}
else if(state==4)
{if(f4>ept)
i4++;
else
i4=0;
if(i4>=me)
{i4=0;
  emf4=1;}
else
emf4=0;}
if(state==1)
return emf1;
else if(state==2)
return emf2;
else if(state==3)
return emf3;
else if(state==4)
return emf4;
else
return 0;
}
void light(int state,int n2,int n1) /* The backbone of the traffic LED's */
{lclose();
if(state==1)
{digitalWrite(gl1,1);
digitalWrite(rl2,1);
digitalWrite(rl3,1);
digitalWrite(rl4,1);
no1[0]=n1;
no2[0]=n2;}
else if(state==2)
{digitalWrite(gl2,1);
digitalWrite(rl1,1);
digitalWrite(rl3,1);
digitalWrite(rl4,1);
no1[1]=n1;
no2[1]=n2;}
else if(state==3)
{digitalWrite(gl3,1);
digitalWrite(rl1,1);
digitalWrite(rl2,1);
digitalWrite(rl4,1);
no1[2]=n1;
no2[2]=n2;}
else if(state==4)
{digitalWrite(gl4,1);
digitalWrite(rl1,1);
digitalWrite(rl2,1);
digitalWrite(rl3,1);
no1[3]=n1;
no2[3]=n2;}
count1();
count2();}
void lclose() /*The Joker this program shutdown all the LED's */
{int i;
for(i=rl1;i<rl1+12;i++)
digitalWrite(i,0);}
void steady(int ls , int cs)  /*This program responsible for the Yellow LED's */
{sf=1;
lclose();
no1[ls-1]=10;
no1[cs-1]=10;
no2[ls-1]=10;
no2[cs-1]=10;
count1();
count2();
if(ls==1&&cs==2||ls==2&&cs==1)
{digitalWrite(yl1,1);
digitalWrite(yl2,1);
digitalWrite(rl3,1);
digitalWrite(rl4,1);}
else if(ls==2&&cs==3||ls==3&&cs==2)
{digitalWrite(yl2,1);
digitalWrite(yl3,1);
digitalWrite(rl1,1);
digitalWrite(rl4,1);}
else if(ls==3&&cs==4||ls==4&&cs==3)
{digitalWrite(yl3,1);
digitalWrite(yl4,1);
digitalWrite(rl1,1);
digitalWrite(rl2,1);}
else if(ls==4&&cs==1||ls==1&&cs==4)
{digitalWrite(yl1,1);
digitalWrite(yl4,1);
digitalWrite(rl2,1);
digitalWrite(rl3,1);}
else if(ls==4&&cs==2||ls==2&&cs==4)
{digitalWrite(yl2,1);
digitalWrite(yl4,1);
digitalWrite(rl1,1);
digitalWrite(rl3,1);}
else if(ls==3&&cs==1||ls==1&&cs==3)
{digitalWrite(yl1,1);
digitalWrite(yl3,1);
digitalWrite(rl2,1);
digitalWrite(rl4,1);}}
void zero()   /*This program responisble making all the 7-segment's --*/
{for(int i=cnt1;i<=cnt8;i+=2)  
count(10,i+1,i);}
void stand()  /*This make all the traffic LED's Red*/
{lclose();
for(int i=rl1;i<=rl4;i++)
digitalWrite(i,1);}
void count1() /*It gives the order to a certain traffic of LSB 7-segments*/
{int i;
for(i=cnt1;i<=cnt4;i+=2)
count(no1[(i-cnt1)/2],i+1,i);}
void count2() /*It gives the order to a certain traffic of MSB 7-segments*/
{int i;
for(i=cnt5;i<=cnt8;i+=2)
count(no2[(i-cnt5)/2],i+1,i);}
void counter()  /*This organize the 7-sgments*/
{int i;
for(i=0;i<4;i++)
{if(no1[i]>9)
no1[i]=9;
if(no2[i]>9)
no2[i]=9;
  no1[i]--;
if(no1[i]<0)
{no1[i]=9;
no2[i]--;}
if(no2[i]<0)
{no1[i]=9;
no2[i]=9;}}
count1();
count2();
}
void next() /*This subprogram queuing the traffic*/
{
if(cstat==1)
cstat=2;
else if(cstat==2)
cstat=4;
else if(cstat==3)
cstat=1;
else if(cstat==4)
cstat=3;
}
void change() /*The main program to organize all the subprograms*/
{myRTC.updateTime();
sec1=myRTC.seconds;
sec=sec1-sec2;
sec=abs(sec);
ucheck(cstat);
rstat=rcheck();
if(sec>0)
{digitalWrite(buz,0);
  lsec++;}
if(sec>0&&sf==0)
{ counter();
tcount++;
ustat=eucheck(cstat);}
if(rstat!=0&&cstat!=rstat&&rfstat==0)
{lcount=tcount;
lstat=cstat;
rlstat=cstat;
cstat=rstat;
tcount=0;
rfstat=1;
lsec=0;}
else if(tcount>rt&&rfstat==1)
{tcount=lcount;
lcount=0;
lstat=cstat;
cstat=rlstat;
rfstat=0;
if(tcount>=(mt-10))
next();
else
{pstat=1;
pcount=mt-tcount;
  n2=pcount%10;
n1=pcount/10;}}
else if((rfstat==0&&ustat==1)||tcount>mt)
{tcount=0;
rfstat=0;
lstat=cstat;
next();}
if(cstat!=lstat)
{i1=0;
i2=0;
i3=0;
i4=0;
sec=0;
steady(lstat,cstat);}
if(sf==1&&sec>0)
{if(pstat==1)
{sf=0;
pstat=0;
light(cstat,n1,n2);}
else if(rfstat==1&&lsec>=2)
{sf=0;
digitalWrite(buz,0);
  light(cstat,1,0);}
else if(rfstat==0)
{sf=0;
light(cstat,2,5);}} 
sec2=sec1;
rstat=0;
ustat=0;
lstat=cstat;}
void loop()   /*The main program*/
{
change();
}